{"version":3,"sources":["../src/errors.js"],"names":["getIn","iterateFields","renderTextNode","getComputedProperties","getFieldErrors","path","internal","external","internalErrors","externalErrors","getErrorSummaryFieldLabel","fieldConfig","context","errorSummaryLabel","data","label","getErrorSummaryData","config","computedProperties","errorSummaryData","treePath","fieldErrors","fieldComputedProperties","shown","length","push","fieldId","id","errors","getFieldErrorToDisplay","touched","undefined","renderFieldError","error","message","renderChildError","childName","childError","children","find","child","name"],"mappings":"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","sourcesContent":["import {getIn} from 'formik';\nimport {iterateFields} from './utils';\nimport renderTextNode from './renderTextNode';\nimport {getComputedProperties} from './rules';\n\nexport const getFieldErrors = (path, internal, external) => {\n\tlet internalErrors = getIn(internal, path) || [];\n\tlet externalErrors = getIn(external, path) || [];\n\n\tif (typeof internalErrors === 'string') {\n\t\tinternalErrors = [internalErrors];\n\t}\n\n\tif (typeof externalErrors === 'string') {\n\t\texternalErrors = [externalErrors];\n\t}\n\n\treturn [\n\t\t...externalErrors,\n\t\t...internalErrors,\n\t];\n};\n\nconst getErrorSummaryFieldLabel = (fieldConfig, context) => {\n\tif (fieldConfig.errorSummaryLabel) {\n\t\treturn fieldConfig.errorSummaryLabel;\n\t}\n\n\t// Attempt to use the field's 'label', this is just a convention.\n\tif (fieldConfig.data && fieldConfig.data.label) {\n\t\treturn renderTextNode(fieldConfig.data.label, 'span', context);\n\t}\n\n\treturn '';\n};\n\nexport const getErrorSummaryData = (config, internalErrors, externalErrors, computedProperties) => {\n\tconst errorSummaryData = [];\n\n\tfor (const {treePath, fieldConfig} of iterateFields(config)) {\n\t\tlet fieldErrors = null;\n\n\t\tconst fieldComputedProperties = getComputedProperties(computedProperties, treePath);\n\n\t\tif (fieldConfig.path && fieldComputedProperties.shown) {\n\t\t\tfieldErrors = getFieldErrors(fieldConfig.path, internalErrors, externalErrors);\n\t\t}\n\n\t\tif (fieldErrors && fieldErrors.length) {\n\t\t\terrorSummaryData.push({\n\t\t\t\tfieldId: `${config.id}.${treePath}`,\n\t\t\t\tlabel: getErrorSummaryFieldLabel(fieldConfig, config.context),\n\t\t\t\terrors: fieldErrors,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn errorSummaryData;\n};\n\nconst getFieldErrorToDisplay = (errors, externalErrors, touched) => {\n\tif (externalErrors && externalErrors.length) {\n\t\treturn externalErrors[0];\n\t}\n\n\tif (touched && errors && errors.length) {\n\t\treturn errors[0];\n\t}\n\n\treturn undefined;\n};\n\n\nexport const renderFieldError = (errors, externalErrors, touched) => {\n\tconst error = getFieldErrorToDisplay(errors, externalErrors, touched);\n\n\tif (error && typeof error === 'string') {\n\t\treturn error;\n\t}\n\n\tif (error && error.message) {\n\t\treturn error.message;\n\t}\n\n\treturn undefined;\n};\n\n\nexport const renderChildError = (childName, errors, externalErrors, touched) => {\n\tconst error = getFieldErrorToDisplay(errors, externalErrors, touched);\n\tlet childError;\n\n\tif (error && error.children && error.children.length) {\n\t\tchildError = error.children.find(child => {\n\t\t\treturn child.name === childName;\n\t\t});\n\t}\n\n\treturn childError ? childError.message : undefined;\n};\n"],"file":"errors.js"}