{"version":3,"sources":["../src/utils.js"],"names":["cloneDeep","setIn","unset","getComputedProperties","getComponent","registeredComponents","componentName","component","console","warn","undefined","getValidator","registeredValidators","validatorName","_iterateFieldsAux","config","partialTreePath","fields","fieldConfig","treePath","id","iterateFields","mapPathsToTree","mapping","path","push","filterFormValues","values","computed","pathsToTreeMap","valuesClone","shouldFilter","doNotSubmit","disabled","fieldsWithThisPath","reduce","acc","field","fieldComputedProperties","getDefaultValues","defaultValues","type","defaultVal","defaultValue"],"mappings":"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","sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport {setIn} from 'formik';\nimport unset from 'lodash.unset';\nimport {getComputedProperties} from './rules';\n\nexport const getComponent = (registeredComponents, componentName) => {\n\tif (!registeredComponents || !registeredComponents[componentName] || !registeredComponents[componentName].component) {\n\t\tconsole.warn(`SchematikForms: No component of type '${componentName}' is registered`);\n\t\treturn undefined;\n\t}\n\n\treturn registeredComponents[componentName].component;\n};\n\nexport const getValidator = (registeredValidators, validatorName) => {\n\tif (!registeredValidators || !registeredValidators[validatorName]) {\n\t\tconsole.warn(`SchematikForms: No validator of type '${validatorName}' is registered`);\n\t\treturn undefined;\n\t}\n\n\treturn registeredValidators[validatorName];\n};\n\nconst _iterateFieldsAux = function* (config, partialTreePath = '') {\n\tif (!config || !config.fields) {\n\t\treturn;\n\t}\n\n\tfor (const fieldConfig of config.fields) {\n\t\tconst treePath = partialTreePath ? `${partialTreePath}.${fieldConfig.id}` : fieldConfig.id;\n\n\t\tyield{\n\t\t\ttreePath: treePath,\n\t\t\tfieldConfig: fieldConfig,\n\t\t};\n\n\t\tyield* _iterateFieldsAux(fieldConfig, treePath);\n\t}\n};\n\n/**\n * Creates an iterator which loops over each field in the form config.\n *\n * Nested fields will be iterated over depth first.\n *\n * @param {object} config\n */\nexport const iterateFields = function* (config) {\n\t// Use a private auxilary function to hide implementation detail, user shouldn't have\n\t// to worry about specifying the path in the tree.\n\tyield* _iterateFieldsAux(config, '');\n};\n\n/**\n * Create a map of paths to 'treePaths'\n *\n * @param {*} config\n */\nexport const mapPathsToTree = config => {\n\tconst mapping = {};\n\n\tfor (const {fieldConfig, treePath} of iterateFields(config)) {\n\t\tmapping[fieldConfig.path] = mapping[fieldConfig.path] || [];\n\n\t\tmapping[fieldConfig.path].push({fieldConfig, treePath});\n\t}\n\n\treturn mapping;\n};\n\n/**\n * Filter out values from fields that are disabled or have the doNotSubmit flag\n *\n * @param {*} values - form values\n * @param {*} computed - map of computed properties\n */\nexport const filterFormValues = (values, config, computed, pathsToTreeMap) => {\n\tconst valuesClone = cloneDeep(values);\n\n\tfor (const {treePath, fieldConfig} of iterateFields(config)) {\n\t\tlet shouldFilter = fieldConfig.doNotSubmit || computed[treePath].disabled;\n\n\t\tif (shouldFilter) {\n\t\t\tconst fieldsWithThisPath = pathsToTreeMap[fieldConfig.path];\n\n\t\t\tshouldFilter = (fieldsWithThisPath || []).reduce((acc, field) => {\n\t\t\t\t// Don't check this field\n\t\t\t\tif (field.treePath === treePath) {\n\t\t\t\t\treturn acc;\n\t\t\t\t}\n\n\t\t\t\tconst fieldComputedProperties = getComputedProperties(computed, field.treePath);\n\n\t\t\t\treturn acc && (field.fieldConfig.doNotSubmit || fieldComputedProperties.disabled);\n\t\t\t}, true);\n\t\t}\n\n\t\tif (shouldFilter) {\n\t\t\tunset(valuesClone, fieldConfig.path);\n\t\t}\n\t}\n\n\treturn valuesClone;\n};\n\nexport const getDefaultValues = (config, registeredComponents) => {\n\tlet defaultValues = {};\n\n\tfor (const {fieldConfig} of iterateFields(config)) {\n\t\tconst type = fieldConfig.type;\n\t\tconst path = fieldConfig.path;\n\n\t\tif (!path) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet defaultVal = undefined;\n\n\t\tif (registeredComponents[type] && typeof registeredComponents[type].defaultValue !== 'undefined') {\n\t\t\tdefaultVal = registeredComponents[type].defaultValue;\n\t\t}\n\n\t\tif (fieldConfig && typeof fieldConfig.defaultValue !== 'undefined') {\n\t\t\tdefaultVal = fieldConfig.defaultValue;\n\t\t}\n\n\t\tdefaultValues = setIn(defaultValues, path, defaultVal);\n\t}\n\n\treturn defaultValues;\n};\n"],"file":"utils.js"}