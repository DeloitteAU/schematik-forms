{"version":3,"sources":["../src/validation.js"],"names":["getIn","setIn","getValidator","getComputedProperties","REQUIRED_VALIDATOR_KEY","defaultRequiredFn","fieldValue","message","falseCountsAsNoValue","String","trim","Array","isArray","length","undefined","makeFieldValidationFunction","registeredValidators","formValues","computedProperties","registeredComponents","validateField","fieldConfig","partialId","partialErrors","fieldIsShown","shown","fieldComputedProperties","componentDefinition","type","validators","required","requiredMessage","fieldErrors","reduce","errorsAccumulator","validatorConfig","validationFn","Error","error","path","options","errors","fields","field","fullId","id","validateForm","config","validationFunctions","validateFieldFn"],"mappings":"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","sourcesContent":["import {getIn, setIn} from 'formik';\nimport {getValidator} from './utils';\nimport {getComputedProperties} from './rules';\n\nexport const REQUIRED_VALIDATOR_KEY = 'required';\n\nexport const defaultRequiredFn = ({fieldValue, message = 'This field is required', falseCountsAsNoValue}) => {\n\tif (!fieldValue && typeof fieldValue !== 'boolean') {\n\t\treturn message;\n\t}\n\n\tif (falseCountsAsNoValue && fieldValue === false) {\n\t\treturn message;\n\t}\n\n\tif ((typeof fieldValue === 'string' || fieldValue instanceof String) && !fieldValue.trim()) {\n\t\treturn message;\n\t}\n\n\tif (Array.isArray(fieldValue) && !fieldValue.length) {\n\t\treturn message;\n\t}\n\n\treturn undefined;\n};\n\nexport const makeFieldValidationFunction = (registeredValidators, formValues, computedProperties, registeredComponents = {}) => {\n\tconst validateField = (fieldConfig, partialId = '', partialErrors = {}) => {\n\t\tconst fieldIsShown = !computedProperties || !partialId || (computedProperties && computedProperties[partialId] && computedProperties[partialId].shown);\n\t\tif (!fieldIsShown) {\n\t\t\treturn partialErrors;\n\t\t}\n\n\t\tconst fieldComputedProperties = getComputedProperties(computedProperties, partialId);\n\n\t\tconst componentDefinition = registeredComponents[fieldConfig.type] || {};\n\n\t\t// Some component may have boolean values, and some components may wish that `false` be treated as an empty\n\t\t// value so that it gets picked up by the required validator\n\t\tlet falseCountsAsNoValue = false;\n\t\tif (typeof componentDefinition.falseCountsAsNoValue === 'boolean') {\n\t\t\tfalseCountsAsNoValue = componentDefinition.falseCountsAsNoValue;\n\t\t}\n\n\t\tlet validators = [];\n\n\t\tif (fieldConfig.validators) {\n\t\t\tvalidators = [...fieldConfig.validators];\n\t\t}\n\n\t\t// A required validator is just a validator, but it's added to the config differently.\n\t\t// Here we add a required validator to the top of the existing list of validators.\n\t\t// In this way we can treat it the same way as the rest of the validation rules applied\n\t\t// to this field.\n\t\tif (fieldComputedProperties.required) {\n\t\t\tvalidators = [\n\t\t\t\t{\n\t\t\t\t\ttype: REQUIRED_VALIDATOR_KEY,\n\t\t\t\t\tmessage: fieldConfig.requiredMessage || undefined,\n\t\t\t\t},\n\t\t\t\t...validators,\n\t\t\t];\n\t\t}\n\n\t\t// Loop through each validator on the field\n\t\tconst fieldErrors = validators.reduce((errorsAccumulator, validatorConfig) => {\n\t\t\tconst validationFn = getValidator(registeredValidators, validatorConfig.type);\n\n\t\t\tif (typeof validationFn !== 'function') {\n\t\t\t\tthrow Error(`SchematikForms: No validation function found for type '${validatorConfig.type}'`);\n\t\t\t}\n\n\t\t\t// Call the validation function\n\t\t\tconst error = validationFn({\n\t\t\t\tfieldConfig,\n\t\t\t\tfieldValue: getIn(formValues, fieldConfig.path),\n\t\t\t\tformValues,\n\t\t\t\tmessage: validatorConfig.message,\n\t\t\t\toptions: validatorConfig.options,\n\t\t\t\tfalseCountsAsNoValue,\n\t\t\t});\n\n\t\t\tif (error) {\n\t\t\t\treturn [\n\t\t\t\t\t...errorsAccumulator,\n\t\t\t\t\terror,\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn errorsAccumulator;\n\t\t\t}\n\t\t}, []);\n\n\t\tlet errors = partialErrors;\n\n\t\t// Populate the errors object if there were errors\n\t\tif (fieldErrors.length) {\n\t\t\terrors = setIn(errors, fieldConfig.path, fieldErrors);\n\t\t}\n\n\t\tif (fieldConfig.fields && fieldConfig.fields.length) {\n\t\t\tfor (const field of fieldConfig.fields) {\n\t\t\t\tconst fullId = partialId ? `${partialId}.${field.id}` : field.id;\n\t\t\t\terrors = validateField(field, fullId, errors);\n\t\t\t}\n\t\t}\n\n\t\treturn errors;\n\t};\n\n\treturn validateField;\n};\n\nexport const validateForm = (config, registeredValidators, formValues, computedProperties, registeredComponents) => {\n\t// Add the default required validation function to the custom validation functions.\n\t// The default will be overridden by a custom 'required' validation function.\n\tconst validationFunctions = {\n\t\t[REQUIRED_VALIDATOR_KEY]: defaultRequiredFn,\n\t\t...registeredValidators,\n\t};\n\n\tconst validateFieldFn = makeFieldValidationFunction(validationFunctions, formValues, computedProperties, registeredComponents);\n\n\treturn validateFieldFn(config);\n};\n"],"file":"validation.js"}